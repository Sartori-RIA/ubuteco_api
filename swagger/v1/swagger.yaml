---
openapi: 3.0.1
info:
  title: API V1
  version: v1
consumes:
- application/json
produces:
- application/json
paths:
  "/api/v1/beer_styles":
    get:
      summary: All Beer Styles
      tags:
      - Beer Styles
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/beer_styles"
    post:
      summary: Create a Beer Style
      tags:
      - Beer Styles
      security:
      - Bearer: {}
      parameters: []
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/beer_style"
        '422':
          description: Invalid request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/errors_object"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/new_beer_style"
  "/api/v1/beer_styles/{id}":
    get:
      summary: Show Beer Style
      tags:
      - Beer Styles
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/beer_style"
    put:
      summary: Update a Beer Style
      tags:
      - Beer Styles
      security:
      - Bearer: {}
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/beer_style"
        '422':
          description: Invalid request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/errors_object"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/beer_style"
    delete:
      summary: Destroy a Beer Style
      tags:
      - Beer Styles
      security:
      - Bearer: {}
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '204':
          description: No Content
  "/api/v1/beer_styles/check/style":
    get:
      summary: Check available name
      tags:
      - Beer Styles
      security:
      - Bearer: {}
      parameters:
      - name: q
        in: query
        schema:
          type: string
      responses:
        '200':
          description: Already Exists
        '204':
          description: Name available
  "/api/v1/beers":
    get:
      summary: All Beers
      tags:
      - Beers
      security:
      - Bearer: {}
      parameters:
      - name: q
        schema:
          type: string
      - name: page
        schema:
          type: string
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/beers"
    post:
      summary: Create a Beer
      tags:
      - Beers
      security:
      - Bearer: {}
      parameters: []
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/beer"
        '422':
          description: Invalid request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/errors_object"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/new_beer"
  "/api/v1/beers/{id}":
    get:
      summary: Show Beer
      tags:
      - Beers
      security:
      - Bearer: {}
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/beer"
    put:
      summary: Update a Beer
      tags:
      - Beers
      security:
      - Bearer: {}
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/beer"
        '422':
          description: Invalid request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/errors_object"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/beer"
    delete:
      summary: Destroy a Beer
      tags:
      - Beers
      security:
      - Bearer: {}
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '204':
          description: No Content
  "/api/v1/customers":
    get:
      summary: All Customers
      tags:
      - Customers
      security:
      - Bearer: {}
      responses:
        '200':
          description: Ok
  "/api/v1/dishes/{dish_id}/ingredients":
    get:
      summary: All ingredients in dish
      tags:
      - Dish ingredients
      security:
      - Bearer: {}
      parameters:
      - name: dish_id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/dish_ingredients"
    post:
      summary: Add new ingredient to dish
      tags:
      - Dish ingredients
      security:
      - Bearer: {}
      parameters:
      - name: dish_id
        in: path
        required: true
        schema:
          type: string
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/dish_ingredient"
        '422':
          description: Invalid request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/errors_object"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/new_dish_ingredient"
  "/api/v1/dishes/{dish_id}/ingredients/{id}":
    put:
      summary: Update ingredient in dish
      tags:
      - Dish ingredients
      security:
      - Bearer: {}
      parameters:
      - name: dish_id
        in: path
        required: true
        schema:
          type: string
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/theme"
        '422':
          description: Invalid request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/errors_object"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/edit_dish_ingredient"
    delete:
      summary: Remove ingredient from dish
      tags:
      - Dish ingredients
      security:
      - Bearer: {}
      parameters:
      - name: dish_id
        in: path
        required: true
        schema:
          type: string
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '204':
          description: No Content
  "/api/v1/dishes":
    get:
      summary: All Dishes
      tags:
      - Dishes
      security:
      - Bearer: {}
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/dishes"
    post:
      summary: Create a Dish
      tags:
      - Dishes
      security:
      - Bearer: {}
      parameters: []
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/dish"
        '422':
          description: Invalid request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/errors_object"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/new_dish"
  "/api/v1/dishes/{id}":
    get:
      summary: Show Dish
      tags:
      - Dishes
      security:
      - Bearer: {}
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/dish"
    put:
      summary: Update a Dish
      tags:
      - Dishes
      security:
      - Bearer: {}
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/dish"
        '422':
          description: Invalid request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/errors_object"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/dish"
    delete:
      summary: Destroy a Dish
      tags:
      - Dishes
      security:
      - Bearer: {}
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '204':
          description: No Content
  "/api/v1/drinks":
    get:
      summary: All Drinks
      tags:
      - Drinks
      security:
      - Bearer: {}
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/drinks"
    post:
      summary: Create a Drink
      tags:
      - Drinks
      security:
      - Bearer: {}
      parameters: []
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/drink"
        '422':
          description: Invalid request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/errors_object"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/new_drink"
  "/api/v1/drinks/{id}":
    get:
      summary: Show Drink
      tags:
      - Drinks
      security:
      - Bearer: {}
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/drink"
    put:
      summary: Update a Drink
      tags:
      - Drinks
      security:
      - Bearer: {}
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/drink"
        '422':
          description: Invalid request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/errors_object"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/drink"
    delete:
      summary: Destroy a Drink
      tags:
      - Drinks
      security:
      - Bearer: {}
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '204':
          description: No Content
  "/api/v1/foods":
    get:
      summary: All Foods
      tags:
      - Foods
      security:
      - Bearer: {}
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/foods"
    post:
      summary: Create a Food
      tags:
      - Foods
      security:
      - Bearer: {}
      parameters: []
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/food"
        '422':
          description: Invalid request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/errors_object"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/new_food"
  "/api/v1/foods/{id}":
    get:
      summary: Show Food
      tags:
      - Foods
      security:
      - Bearer: {}
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/food"
    put:
      summary: Update a Food
      tags:
      - Foods
      security:
      - Bearer: {}
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/food"
        '422':
          description: Invalid request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/errors_object"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/food"
    delete:
      summary: Destroy a Food
      tags:
      - Foods
      security:
      - Bearer: {}
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '204':
          description: No Content
  "/api/v1/kitchens":
    get:
      summary: All Dishes to make
      tags:
      - Kitchen
      security:
      - Bearer: {}
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/kitchen_items"
  "/api/v1/kitchens/{id}":
    put:
      summary: Update dish preparation statuses
      tags:
      - Kitchen
      security:
      - Bearer: {}
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/kitchen_item"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/edit_order_item"
  "/api/v1/makers":
    get:
      summary: All Makers
      tags:
      - Makers
      security:
      - Bearer: {}
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/makers"
    post:
      summary: Create a Maker
      tags:
      - Makers
      security:
      - Bearer: {}
      parameters: []
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/maker"
        '422':
          description: Invalid request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/errors_object"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/new_maker"
  "/api/v1/makers/{id}":
    get:
      summary: Show Maker
      tags:
      - Makers
      security:
      - Bearer: {}
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/maker"
    put:
      summary: Update a Maker
      tags:
      - Makers
      security:
      - Bearer: {}
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/maker"
        '422':
          description: Invalid request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/errors_object"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/maker"
    delete:
      summary: Destroy a Maker
      tags:
      - Makers
      security:
      - Bearer: {}
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '204':
          description: No Content
  "/api/v1/orders/{order_id}/items":
    get:
      summary: All Items from order
      tags:
      - Order Items
      security:
      - Bearer: {}
      parameters:
      - name: order_id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/order_items"
    post:
      summary: Add new item to order
      tags:
      - Order Items
      security:
      - Bearer: {}
      parameters:
      - name: order_id
        in: path
        required: true
        schema:
          type: string
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/order_item"
        '422':
          description: Invalid request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/errors_object"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/new_order_item"
  "/api/v1/orders/{order_id}/items/{item_id}":
    put:
      summary: Update item in order
      tags:
      - Order Items
      security:
      - Bearer: {}
      parameters:
      - name: order_id
        in: path
        required: true
        schema:
          type: string
      - name: item_id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/order_item"
        '422':
          description: Ok
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/errors_object"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/order_item"
    delete:
      summary: Remove item in order
      tags:
      - Order Items
      security:
      - Bearer: {}
      parameters:
      - name: order_id
        in: path
        required: true
        schema:
          type: string
      - name: item_id
        in: path
        required: true
        schema:
          type: string
      responses:
        '204':
          description: No Content
  "/api/v1/orders":
    get:
      summary: All Orders
      tags:
      - Orders
      security:
      - Bearer: {}
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/orders"
    post:
      summary: Create a Order
      tags:
      - Orders
      security:
      - Bearer: {}
      parameters: []
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/order"
        '422':
          description: Invalid request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/errors_object"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/new_order"
  "/api/v1/orders/{id}":
    get:
      summary: Show Order
      tags:
      - Orders
      security:
      - Bearer: {}
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Ok
    put:
      summary: Update a Order
      tags:
      - Orders
      security:
      - Bearer: {}
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/order"
        '422':
          description: Invalid request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/errors_object"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/edit_order"
    delete:
      summary: Destroy a Order
      tags:
      - Orders
      security:
      - Bearer: {}
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '204':
          description: No Content
  "/api/v1/organizations/{organization_id}/themes":
    get:
      summary: Show organization theme
      tags:
      - Organization Theme
      security:
      - Bearer: {}
      parameters:
      - name: organization_id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/themes"
  "/api/v1/organizations/{organization_id}/themes/{theme_id}":
    get:
      summary: Show organization theme
      tags:
      - Organization Theme
      security:
      - Bearer: {}
      parameters:
      - name: organization_id
        in: path
        required: true
        schema:
          type: string
      - name: theme_id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/theme"
    put:
      summary: Update organization theme
      tags:
      - Organization Theme
      security:
      - Bearer: {}
      parameters:
      - name: organization_id
        in: path
        required: true
        schema:
          type: string
      - name: theme_id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/theme"
        '422':
          description: Invalid request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/errors_object"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/theme"
  "/api/v1/organizations/{organization_id}/users":
    get:
      summary: All Organization users
      tags:
      - Organization Users
      security:
      - Bearer: {}
      parameters:
      - name: organization_id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Ok
  "/api/v1/organizations":
    get:
      summary: All Organizations
      tags:
      - Organizations
      security:
      - Bearer: {}
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/organizations"
  "/api/v1/organizations/{id}":
    get:
      summary: Show Organization
      tags:
      - Organizations
      security:
      - Bearer: {}
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/organization"
    put:
      summary: Update a Organization
      tags:
      - Organizations
      security:
      - Bearer: {}
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/organization"
        '422':
          description: Invalid request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/errors_object"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/organization"
    delete:
      summary: Destroy a Organization
      tags:
      - Organizations
      security:
      - Bearer: {}
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '204':
          description: No Content
  "/api/v1/roles":
    get:
      summary: All Roles
      tags:
      - Roles
      security:
      - Bearer: {}
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/roles"
    post:
      summary: Create a Role
      tags:
      - Roles
      security:
      - Bearer: {}
      parameters: []
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/role"
        '422':
          description: Invalid request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/errors_object"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/new_role"
  "/api/v1/roles/{id}":
    get:
      summary: Show Role
      tags:
      - Roles
      security:
      - Bearer: {}
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/role"
    put:
      summary: Update a Role
      tags:
      - Roles
      security:
      - Bearer: {}
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/role"
        '422':
          description: Invalid request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/errors_object"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/role"
    delete:
      summary: Destroy a Role
      tags:
      - Roles
      security:
      - Bearer: {}
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '204':
          description: No Content
  "/api/v1/tables":
    get:
      summary: All Tables
      tags:
      - Tables
      security:
      - Bearer: {}
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/tables"
    post:
      summary: Create a Table
      tags:
      - Tables
      security:
      - Bearer: {}
      parameters: []
      responses:
        '201':
          description: Ok
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/table"
        '422':
          description: Invalid request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/errors_object"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/new_table"
  "/api/v1/tables/{id}":
    get:
      summary: Show Table
      tags:
      - Tables
      security:
      - Bearer: {}
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/table"
    put:
      summary: Update a Table
      tags:
      - Tables
      security:
      - Bearer: {}
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/table"
        '422':
          description: Invalid request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/errors_object"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/table"
    delete:
      summary: Destroy a Table
      tags:
      - Tables
      security:
      - Bearer: {}
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '204':
          description: No Content
  "/api/v1/users":
    post:
      summary: Create a User
      tags:
      - Users
      security:
      - Bearer: {}
      parameters: []
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/user"
        '422':
          description: Invalid request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/errors_object"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/new_user"
  "/api/v1/users/{id}":
    get:
      summary: Show User
      tags:
      - Users
      security:
      - Bearer: {}
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/user"
    put:
      summary: Update a User
      tags:
      - Users
      security:
      - Bearer: {}
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/user"
        '422':
          description: Invalid request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/errors_object"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/user"
    delete:
      summary: Destroy a User
      tags:
      - Users
      security:
      - Bearer: {}
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '204':
          description: No Content
  "/api/v1/wine_styles":
    get:
      summary: All Wine Styles
      tags:
      - Wine Styles
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/wine_styles"
    post:
      summary: Create a Wine Style
      tags:
      - Wine Styles
      security:
      - Bearer: {}
      parameters: []
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/wine_style"
        '422':
          description: Invalid request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/errors_object"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/new_wine_style"
  "/api/v1/wine_styles/{id}":
    get:
      summary: Show Wine Style
      tags:
      - Wine Styles
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/wine_style"
    put:
      summary: Update a Wine Style
      tags:
      - Wine Styles
      security:
      - Bearer: {}
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/wine_style"
        '422':
          description: Invalid request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/errors_object"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/wine_style"
    delete:
      summary: Destroy a Wine Style
      tags:
      - Wine Styles
      security:
      - Bearer: {}
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '204':
          description: No Content
  "/api/v1/wine_styles/check/style":
    get:
      summary: Check available name
      tags:
      - Wine Styles
      security:
      - Bearer: {}
      parameters:
      - name: q
        in: query
        schema:
          type: string
      responses:
        '200':
          description: Already Exists
        '204':
          description: Name available
  "/api/v1/wines":
    get:
      summary: All Wines
      tags:
      - Wines
      security:
      - Bearer: {}
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/wines"
    post:
      summary: Create a Wine
      tags:
      - Wines
      security:
      - Bearer: {}
      parameters: []
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/wine"
        '422':
          description: Invalid request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/errors_object"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/new_wine"
  "/api/v1/wines/{id}":
    get:
      summary: Show Wine
      tags:
      - Wines
      security:
      - Bearer: {}
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/wine"
    put:
      summary: Update a Wine
      tags:
      - Wines
      security:
      - Bearer: {}
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/wine"
        '422':
          description: Invalid request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/errors_object"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/wine"
    delete:
      summary: Destroy a Wine
      tags:
      - Wines
      security:
      - Bearer: {}
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '204':
          description: No Content
  "/auth/code":
    post:
      summary: Code received to reset your password
      tags:
      - Auth
      parameters: []
      responses:
        '200':
          description: Ok
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                code: string
              required:
              - code
  "/auth/confirmations":
    get:
      summary: Account data after confirm
      tags:
      - Auth
      parameters:
      - name: confirmation_token
        in: query
        schema:
          type: string
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/user"
  "/auth/password":
    post:
      summary: Forgot password
      tags:
      - Auth
      parameters: []
      responses:
        '200':
          description: Ok
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
              required:
              - email
  "/auth/sign_up":
    post:
      summary: Create new account
      tags:
      - Auth
      parameters: []
      responses:
        '200':
          description: Account Created
        '422':
          description: Unprocessable entity
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  "$ref": "#/components/schemas/new_user"
                organization_attributes:
                  "$ref": "#/components/schemas/new_organization"
              required:
              - user
  "/auth/reset_passwords":
    put:
      summary: Change your password, when forgot
      tags:
      - Auth
      security:
      - Bearer: {}
      parameters: []
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/user"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                reset_params:
                  type: object
                  properties:
                    password: string
              required:
              - reset_params
  "/auth/sign_in":
    post:
      summary: Sign In
      tags:
      - Auth
      parameters: []
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
      requestBody:
        content:
          application/json:
            schema:
              properties:
                email:
                  type: string
                password:
                  type: string
              required:
              - email
              - password
  "/auth/sign_out":
    delete:
      summary: Sign out
      tags:
      - Auth
      security:
      - Bearer: {}
      responses:
        '200':
          description: Unauthorized
servers:
- url: http://{defaultHost}
  variables:
    defaultHost:
      default: localhost:3000
components:
  securitySchemes:
    Bearer:
      description: JWT key necessary to use API calls
      name: Authorization
      in: header
  schemas:
    errors_object:
      type: object
      properties:
        errors:
          "$ref": "#/components/schemas/errors_map"
    errors_map:
      type: object
      additionalProperties:
        type: array
        items:
          type: string
    beers:
      type: array
      items:
        "$ref": "#/components/schemas/beer"
    beer:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        quantity:
          type: integer
        price_cents:
          type: integer
        price_currency:
          type: string
        maker_id:
          type: integer
        beer_style_id:
          type: integer
        maker:
          "$ref": "#/components/schemas/maker"
        beer_style:
          "$ref": "#/components/schemas/beer_style"
        image:
          "$ref": "#/components/schemas/s3_image"
      required:
      - name
      - quantity_stock
      - price_cents
      - price_currency
      - maker_id
      - beer_style_id
      - image
    new_beer:
      type: object
      properties:
        name:
          type: string
        quantity:
          type: integer
        price:
          type: number
        maker_id:
          type: integer
        beer_style_id:
          type: integer
      required:
      - name
      - quantity_stock
      - price
      - maker_id
      - beer_style_id
    beer_styles:
      type: array
      items:
        "$ref": "#/components/schemas/beer_style"
    beer_style:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
      required:
      - id
      - name
    new_beer_style:
      type: object
      properties:
        name:
          type: string
      required:
      - name
    dishes:
      type: array
      items:
        "$ref": "#/components/schemas/dish"
    dish:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        price_cents:
          type: number
        price_currency:
          type: string
        dish_ingredients:
          "$ref": "#/components/schemas/dish_ingredients"
        image:
          "$ref": "#/components/schemas/s3_image"
      required:
      - id
      - name
      - price_cents
      - price_currency
      - image
    edit_dish:
      type: object
      properties:
        name:
          type: string
        price:
          type: number
        dish_ingredients_attributes:
          "$ref": "#/components/schemas/edit_dish_ingredients"
      required:
      - name
      - price
    new_dish:
      type: object
      properties:
        name:
          type: string
        price:
          type: number
        dish_ingredients_attributes:
          "$ref": "#/components/schemas/new_dish_ingredients"
      required:
      - name
      - price
    new_dish_ingredients:
      type: array
      items:
        "$ref": "#/components/schemas/new_dish_ingredient"
    edit_dish_ingredients:
      type: array
      items:
        "$ref": "#/components/schemas/edit_dish_ingredient"
    dish_ingredients:
      type: array
      items:
        "$ref": "#/components/schemas/dish_ingredient"
    edit_dish_ingredient:
      type: object
      properties:
        id:
          type: integer
        food_id:
          type: integer
        quantity:
          type: integer
      required:
      - food
      - food_id
      - quantity
    dish_ingredient:
      type: object
      properties:
        id:
          type: integer
        food:
          "$ref": "#/components/schemas/food"
        food_id:
          type: integer
        quantity:
          type: integer
      required:
      - id
      - food
      - food_id
      - quantity
    new_dish_ingredient:
      type: object
      properties:
        food_id:
          type: integer
        quantity:
          type: integer
      required:
      - food_id
      - quantity
    drinks:
      type: array
      items:
        "$ref": "#/components/schemas/drink"
    drink:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        quantity:
          type: integer
        price_cents:
          type: integer
        price_currency:
          type: string
        maker_id:
          type: integer
        maker:
          "$ref": "#/components/schemas/maker"
        image:
          "$ref": "#/components/schemas/s3_image"
      required:
      - id
      - name
      - quantity_stock
      - price_cents
      - price_currency
      - image
    new_drink:
      type: object
      properties:
        name:
          type: string
        quantity:
          type: integer
        price:
          type: number
        price_currency:
          type: string
        maker_id:
          type: integer
      required:
      - name
      - quantity_stock
      - price
      - price_currency
      - maker_id
    foods:
      type: array
      items:
        "$ref": "#/components/schemas/food"
    food:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        quantity_stock:
          type: integer
        valid_until:
          type: string
        price_cents:
          type: integer
        price_currency:
          type: string
        image:
          "$ref": "#/components/schemas/s3_image"
      required:
      - id
      - name
      - quantity_stock
      - valid_until
      - price_cents
      - price_currency
      - image
    new_food:
      type: object
      properties:
        name:
          type: string
        quantity_stock:
          type: integer
        valid_until:
          type: string
        price:
          type: number
      required:
      - name
      - quantity_stock
      - valid_until
      - price
    makers:
      type: array
      items:
        "$ref": "#/components/schemas/maker"
    maker:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        country:
          type: string
      required:
      - id
      - name
      - country
    new_maker:
      type: object
      properties:
        name:
          type: string
        country:
          type: string
      required:
      - name
      - country
    orders:
      type: array
      items:
        "$ref": "#/components/schemas/order"
    order:
      type: object
      properties:
        id:
          type: integer
      required:
      - id
    new_order:
      type: object
      properties: {}
      required: []
    order_items:
      type: array
      items:
        "$ref": "#/components/schemas/order_item"
    order_item:
      type: object
      properties:
        id:
          type: integer
        item:
          anyOf:
          - "$ref": "#/components/schemas/drink"
          - "$ref": "#/components/schemas/wine"
          - "$ref": "#/components/schemas/beer"
          - "$ref": "#/components/schemas/dish"
        item_type:
          type: string
        quantity:
          type: integer
        status:
          type: string
      required:
      - id
      - item
      - item_id
      - item_type
      - quantity
      - status
    new_order_item:
      type: object
      properties:
        item:
          anyOf:
          - "$ref": "#/components/schemas/drink"
          - "$ref": "#/components/schemas/wine"
          - "$ref": "#/components/schemas/beer"
          - "$ref": "#/components/schemas/dish"
        item_id:
          type: integer
        item_type:
          type: string
        quantity:
          type: integer
      required:
      - item_id
      - item_type
      - quantity
    kitchen_items:
      type: array
      items:
        "$ref": "#/components/schemas/kitchen_item"
    kitchen_item:
      type: object
      properties:
        id:
          type: integer
        table:
          "$ref": "#/components/schemas/table"
        order_item:
          "$ref": "#/components/schemas/dish"
        status:
          type: string
      required:
      - id
      - status
    organizations:
      type: array
      items:
        "$ref": "#/components/schemas/organization"
    organization:
      type: object
      properties:
        id:
          type: integer
        logo:
          "$ref": "#/components/schemas/s3_image"
      required:
      - id
      - logo
    new_organization:
      type: object
      properties: {}
      required: []
    roles:
      type: array
      items:
        "$ref": "#/components/schemas/role"
    role:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
      required:
      - id
      - name
    new_role:
      type: object
      properties:
        name:
          type: string
      required:
      - name
    tables:
      type: array
      items:
        "$ref": "#/components/schemas/table"
    table:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        chairs:
          type: integer
      required:
      - id
      - name
      - chairs
    new_table:
      type: object
      properties:
        name:
          type: string
        chairs:
          type: integer
      required:
      - name
      - chairs
    themes:
      type: array
      items:
        "$ref": "#/components/schemas/theme"
    theme:
      type: object
      properties:
        id:
          type: integer
      required:
      - id
    users:
      type: array
      items:
        "$ref": "#/components/schemas/user"
    user:
      type: object
      properties:
        id:
          type: integer
        avatar:
          "$ref": "#/components/schemas/s3_image"
      required:
      - id
      - avatar
    new_user:
      type: object
      properties: {}
      required: []
    wines:
      type: array
      items:
        "$ref": "#/components/schemas/wine"
    wine:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        quantity:
          type: integer
        price_cents:
          type: integer
        price_currency:
          type: string
        maker_id:
          type: integer
        wine_style_id:
          type: integer
        maker:
          "$ref": "#/components/schemas/maker"
        wine_style:
          "$ref": "#/components/schemas/wine_style"
        image:
          "$ref": "#/components/schemas/s3_image"
      required:
      - id
      - name
      - quantity_stock
      - price_cents
      - price_currency
      - maker_id
      - maker
      - wine_style
      - wine_style_id
      - image
    new_wine:
      type: object
      properties:
        name:
          type: string
        quantity:
          type: integer
        price:
          type: integer
        maker_id:
          type: integer
        wine_style_id:
          type: integer
      required:
      - name
      - quantity_stock
      - price
      - maker_id
      - wine_style_id
    wine_styles:
      type: array
      items:
        "$ref": "#/components/schemas/wine_style"
    wine_style:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
      required:
      - id
      - name
    new_wine_style:
      type: object
      properties:
        name:
          type: string
      required:
      - name
    s3_image:
      type: object
      properties:
        url:
          type: string
        thumb:
          type: object
          properties:
            url:
              type: string
          required:
          - url
      required:
      - url
